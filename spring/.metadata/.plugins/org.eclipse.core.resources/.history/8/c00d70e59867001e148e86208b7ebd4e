package com.example.demo;

import java.util.Properties;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

@Configuration
@PropertySource("persistence.properties")
public class DatabaseConfig {
	 @Autowired
   private Environment env;
	 
  private static final Logger LOGGER = LoggerFactory.getLogger(LifeprodBackendApplication.class);
	 
	 @Bean
   public DataSource dataSource() {
       final DriverManagerDataSource dataSource = new DriverManagerDataSource();
       dataSource.setDriverClassName(env.getProperty("driverClassName"));
       dataSource.setUrl(env.getProperty("url"));
       dataSource.setUsername(env.getProperty("user"));
       dataSource.setPassword(env.getProperty("password"));
       LOGGER.info(dataSource.toString());
       return dataSource;
   }
	 
	 @Bean
	 public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource) {
	     LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
	     em.setDataSource(dataSource);
	     em.setPackagesToScan("com.example.demo");
	     
	     HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
	     em.setJpaVendorAdapter(vendorAdapter);

	     Properties properties = new Properties();
	     properties.put("persistence.properties", "org.hibernate.dialect.SQLiteDialect");
	     em.setJpaProperties(properties);

	     return em;
	 }

}
