package com.example.demo.config;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.crypto.password.PasswordEncoder;
import com.example.demo.models.User;
import com.example.demo.repositories.UserRepository;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Component;

public class LifeProdBackendAuthentication implements AuthenticationProvider {
	@Autowired
  private UserService userRepository;

  @Autowired
  private PasswordEncoder passwordEncoder;
  
  @Override
  public Authentication authenticate(Authentication authentication) throws AuthenticationException {
      String username = authentication.getName();
      String pwd = authentication.getCredentials().toString();
      List<User> customers = userRepository.findByEmail(username);
      if (customers.size() > 0) {
          User user = user.get(0);
          if (passwordEncoder.matches(pwd, user.getPassword())) {
              // You can store any additional information about the authenticated user in the UserDetails object.
              // Here, we are storing the customer object itself as the principal.
              return new UsernamePasswordAuthenticationToken(customer, pwd);
          } else {
              throw new BadCredentialsException("Invalid password!");
          }
      } else {
          throw new BadCredentialsException("No user registered with this email!");
      }
  }

  @Override
  public boolean supports(Class<?> authentication) {
      return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));
  }
}