package com.example.demo.config;

import java.util.Collections;
import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class SecurityConfig {
	@Bean
  SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
      http
      	.securityContext((context) -> context.requireExplicitSave(false))
      	.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.ALWAYS))
      	.cors(corsCustomizer -> corsCustomizer.configurationSource(corsConfigurationSource())).csrf((csrf) -> csrf.disable())
              .authorizeHttpRequests((requests) -> requests
                      .requestMatchers("/api/user/all").authenticated()
                      .requestMatchers(
                      		"/api/user/signup",
                      		"/api/user/all"
                      ).permitAll())
              .formLogin(Customizer.withDefaults())
              .httpBasic(Customizer.withDefaults());
      return http.build();
  }
	
  public CorsConfigurationSource corsConfigurationSource() {
      CorsConfiguration config = new CorsConfiguration();
      config.setAllowedOrigins(Arrays.asList(
      		"*"
      ));
      config.setAllowedMethods(Collections.singletonList("*"));
      config.setAllowCredentials(true);
      config.setAllowedHeaders(Collections.singletonList("*"));
      config.setMaxAge(3600L);

      UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
      source.registerCorsConfiguration("/**", config);
      return source;
  }
}